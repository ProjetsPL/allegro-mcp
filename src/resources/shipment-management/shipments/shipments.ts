// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../../core/resource';
import * as ShipmentsAPI from './shipments';
import * as CancelCommandsAPI from './cancel-commands';
import {
  CancelCommand,
  CancelCommandCancelParams,
  CancelCommandGetStatusResponse,
  CancelCommands,
} from './cancel-commands';
import * as CreateCommandsAPI from './create-commands';
import {
  CreateCommandCreateParams,
  CreateCommandGetStatusResponse,
  CreateCommands,
  CreateShipmentCommand,
  Error400,
} from './create-commands';
import { APIPromise } from '../../../core/api-promise';
import { buildHeaders } from '../../../internal/headers';
import { RequestOptions } from '../../../internal/request-options';
import { path } from '../../../internal/utils/path';

export class Shipments extends APIResource {
  createCommands: CreateCommandsAPI.CreateCommands = new CreateCommandsAPI.CreateCommands(this._client);
  cancelCommands: CancelCommandsAPI.CancelCommands = new CancelCommandsAPI.CancelCommands(this._client);

  /**
   * Use this resource to get parcel details. Read more:
   * <a href="../../tutorials/jak-zarzadzac-przesylkami-przez-wysylam-z-allegro-LRVjK7K21sY#jak-pobrac-szczegolowe-informacje-o-paczce" target="_blank">PL</a>
   * /
   * <a href="../../tutorials/how-to-manage-parcels-via-ship-with-allegro-ZM9YAyGKWTV#how-to-retrieve-shipment-details" target="_blank">EN</a>.
   *
   * @example
   * ```ts
   * const shipment =
   *   await client.shipmentManagement.shipments.retrieve(
   *     'shipmentId',
   *   );
   * ```
   */
  retrieve(shipmentID: string, options?: RequestOptions): APIPromise<ShipmentRetrieveResponse> {
    return this._client.get(path`/shipment-management/shipments/${shipmentID}`, {
      ...options,
      headers: buildHeaders([{ Accept: 'application/vnd.allegro.public.v1+json' }, options?.headers]),
    });
  }
}

/**
 * Address object
 */
export interface Address {
  city: string;

  /**
   * Country code in ISO 3166-1 alfa-2 format (two-letter code).
   */
  countryCode: string;

  /**
   * Email address. For receiver, must be a valid buyer email generated by Allegro
   * (eg. hamu7udk3p+17454c1b6@allegromail.pl).
   */
  email: string;

  /**
   * Cell phone
   */
  phone: string;

  postalCode: string;

  street: string;

  /**
   * Company name. Name or Company are required.
   */
  company?: string;

  /**
   * Person name. Name or Company are required.
   */
  name?: string;

  /**
   * Pickup point id. You can get it from order or directly from courier service.
   */
  point?: string;

  /**
   * Required for shipments to Ireland( county name ), United States ( state
   * abbreviation / ISO code ), Canada ( province postal code / ISO code )
   */
  state?: string;
}

export interface CashOnDelivery {
  /**
   * Postpaid value
   */
  amount: string;

  /**
   * ISO 4217 currency code.
   */
  currency: string;

  /**
   * Bank account number.
   */
  iban?: string;

  /**
   * Bank account owner.
   */
  ownerName?: string;
}

export interface DimensionValue {
  /**
   * Dimension unit. Currently only `CENTIMETER` is accepted.
   */
  unit: 'CENTIMETER' | null;

  /**
   * Dimension value.
   */
  value: number;
}

export interface Insurance {
  /**
   * Additional parcel protection value
   */
  amount: string;

  /**
   * ISO 4217 currency code.
   */
  currency: string;
}

/**
 * Receiver address data with optional point ID.
 */
export interface ReceiverAddress extends Address {
  /**
   * Pick up point id. You can get it from order or directly from courier service.
   */
  point?: string;
}

/**
 * Shipment owner data. This address will be provided on label and will be used to
 * operation return.
 */
export interface SenderAddress extends Address {
  /**
   * Drop off point id. You can get it directly from courier service.
   */
  point?: string;
}

/**
 * @deprecated Optional pickup address with optional drop-off point. If empty, then
 * sender object will be used. Parameter is deprecated and will be removed in the
 * future. Pickup address should be provided when requesting Pickup.
 */
export interface ShipmentPickupAddress extends Address {
  /**
   * Drop off point id. You can get it directly from courier service.
   */
  point?: string;
}

export interface WeightValue {
  /**
   * Weight unit. Currently only `KILOGRAMS` is accepted.
   */
  unit: 'KILOGRAMS' | null;

  /**
   * Weight value, provided in a string format to avoid rounding errors.
   */
  value: number;
}

export interface ShipmentRetrieveResponse {
  id?: string;

  /**
   * Key-Value map defining non-standard, carrier specific features. List of the
   * supported properties is located as sub-resource in
   * /shipment-management/delivery-services.
   */
  additionalProperties?: Record<string, string>;

  /**
   * List of additional services.
   */
  additionalServices?: Array<string>;

  /**
   * Shipment cancellation date. Only for canceled shipments, in all other cases is
   * null.
   */
  canceledDate?: string;

  /**
   * ID of carrier which carries out a shipment
   */
  carrier?: string;

  cashOnDelivery?: CashOnDelivery;

  /**
   * Shipment creation date
   */
  createdDate?: string;

  /**
   * ID of merchant agreement, registered in WZA. For Allegro methods, this field is
   * null.
   */
  credentialsId?: string;

  /**
   * Id of delivery method, chosen by buyer in order.
   */
  deliveryMethodId?: string;

  insurance?: Insurance;

  /**
   * Label file format.
   */
  labelFormat?: 'PDF' | 'ZPL' | 'EPL';

  packages?: Array<ShipmentRetrieveResponse.Package>;

  /**
   * @deprecated Optional pickup address with optional drop-off point. If empty, then
   * sender object will be used. Parameter is deprecated and will be removed in the
   * future. Pickup address should be provided when requesting Pickup.
   */
  pickup?: ShipmentPickupAddress;

  /**
   * Information about pickup order option availability for this shipment. True if it
   * is possible to order a pickup for given shipment.
   */
  pickupAvailable?: boolean;

  /**
   * Receiver address data with optional point ID.
   */
  receiver?: ReceiverAddress;

  /**
   * Shipment identifier in own system. Example: `Ordering number`.
   */
  referenceNumber?: string;

  /**
   * Shipment owner data. This address will be provided on label and will be used to
   * operation return.
   */
  sender?: SenderAddress;

  /**
   * List with identifiers of the carriers that take part in the transport of this
   * shipment. Often it is a single value list, when only one carrier is involved.
   * There are shipments where multiple carriers are used to deliver the package,
   * mainly in a case of international shipments, then there will be two or more
   * values.
   */
  transport?: Array<string>;
}

export namespace ShipmentRetrieveResponse {
  export interface Package {
    height?: ShipmentsAPI.DimensionValue;

    length?: ShipmentsAPI.DimensionValue;

    /**
     * Additional information on the package label.
     */
    textOnLabel?: string;

    type?: 'DOX' | 'PACKAGE' | 'PALLET' | 'OTHER';

    /**
     * Waybill number (carrier tracking number).
     */
    waybill?: string;

    weight?: ShipmentsAPI.WeightValue;

    width?: ShipmentsAPI.DimensionValue;
  }
}

Shipments.CreateCommands = CreateCommands;
Shipments.CancelCommands = CancelCommands;

export declare namespace Shipments {
  export {
    type Address as Address,
    type CashOnDelivery as CashOnDelivery,
    type DimensionValue as DimensionValue,
    type Insurance as Insurance,
    type ReceiverAddress as ReceiverAddress,
    type SenderAddress as SenderAddress,
    type ShipmentPickupAddress as ShipmentPickupAddress,
    type WeightValue as WeightValue,
    type ShipmentRetrieveResponse as ShipmentRetrieveResponse,
  };

  export {
    CreateCommands as CreateCommands,
    type CreateShipmentCommand as CreateShipmentCommand,
    type Error400 as Error400,
    type CreateCommandGetStatusResponse as CreateCommandGetStatusResponse,
    type CreateCommandCreateParams as CreateCommandCreateParams,
  };

  export {
    CancelCommands as CancelCommands,
    type CancelCommand as CancelCommand,
    type CancelCommandGetStatusResponse as CancelCommandGetStatusResponse,
    type CancelCommandCancelParams as CancelCommandCancelParams,
  };
}
